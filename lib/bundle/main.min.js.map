{"version":3,"sources":["../../src/mirror.js","../../src/utils.js","../../src/base.js","../../src/editable.js","../../src/input.js","../../src/main.js"],"names":["attributes","createMirror","element","html","css","styles","mirror","document","createElement","tagName","push","forEach","attr","getComputedStyle","keys","key","style","innerHTML","parentNode","insertBefore","nextSibling","marker","ownerDocument","getElementById","boundingRect","offsetLeft","offsetTop","offsetHeight","removeChild","getContext","settings","arguments","length","undefined","customPos","iframe","noShadowCaret","contentWindow","contentDocument","getOffset","ctx","win","window","doc","rect","getBoundingClientRect","docEl","documentElement","scrollLeft","pageXOffset","scrollTop","pageYOffset","top","left","isObject","value","_typeof","createCaret","contentEditable","getSelection","sel","rangeCount","range","getRangeAt","startContainer","startOffset","endOffset","getPos","getRange","clonedRange","cloneRange","selectNodeContents","setEnd","endContainer","pos","toString","detach","offset","found","find","position","parent","i","childNodes","node","nodeType","createRange","setStart","removeAllRanges","addRange","inputOffset","body","hasCustomPos","fixedPosition","height","width","shadowCaret","createTextNode","insertNode","selectNode","clientTop","clientLeft","getPosition","format","val","replace","startRange","slice","endRange","selectionStart","selectionEnd","setSelectionRange","elementOffset","options","caret","setPos","Util","hasAttribute","parentElement","getContentEditableInParent","nodeName","target","isInputField","innerText","CaretUtil","CaretPos","startAt","stopAt","Element","Error","this","caretPosition","get","isNaN","Start","End","getContent","substring","charAt","Caret","_CaretUtil","onload","querySelectorAll","start","addEventListener","_this2","_handleEvent","bind","NodeList","Document","caretChangeHandler","event","checkTarget","enable","_triggerCaretChange","getSelectedText","getCharBeforCaret","disable","map","handler","fnc","call"],"mappings":"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","file":"main.min.js","sourcesContent":["const attributes = [\n  'borderBottomWidth',\n  'borderLeftWidth',\n  'borderRightWidth',\n  'borderTopStyle',\n  'borderRightStyle',\n  'borderBottomStyle',\n  'borderLeftStyle',\n  'borderTopWidth',\n  'boxSizing',\n  'fontFamily',\n  'fontSize',\n  'fontWeight',\n  'height',\n  'letterSpacing',\n  'lineHeight',\n  'marginBottom',\n  'marginLeft',\n  'marginRight',\n  'marginTop',\n  'outlineWidth',\n  'overflow',\n  'overflowX',\n  'overflowY',\n  'paddingBottom',\n  'paddingLeft',\n  'paddingRight',\n  'paddingTop',\n  'textAlign',\n  'textOverflow',\n  'textTransform',\n  'whiteSpace',\n  'wordBreak',\n  'wordWrap',\n];\n\n/**\n * Create a mirror\n *\n * @param {Element} element The element\n * @param {string} html The html\n *\n * @return {object} The mirror object\n */\nconst createMirror = (element, html) => {\n\n  /**\n   * The mirror element\n   */\n  const mirror = document.createElement('div');\n\n  /**\n   * Create the CSS for the mirror object\n   *\n   * @return {object} The style object\n   */\n  const mirrorCss = () => {\n    const css = {\n      position: 'absolute',\n      left: -9999,\n      top: 0,\n      zIndex: -2000\n    };\n\n    if (element.tagName === 'TEXTAREA') {\n      attributes.push('width');\n    }\n\n    attributes.forEach((attr) => {\n      css[attr] = getComputedStyle(element)[attr];\n    });\n\n    return css;\n  };\n\n  /**\n   * Initialize the mirror\n   *\n   * @param {string} html The html\n   *\n   * @return {void}\n   */\n  const initialize = (html) => {\n    const styles = mirrorCss();\n    Object.keys(styles).forEach(key => {\n      mirror.style[key] = styles[key];\n    });\n    mirror.innerHTML = html;\n    element.parentNode.insertBefore(mirror, element.nextSibling);\n  };\n\n  /**\n   * Get the rect\n   *\n   * @return {Rect} The bounding rect\n   */\n  const rect = () => {\n    const marker = mirror.ownerDocument.getElementById('caret-position-marker');\n    const boundingRect = {\n      left: marker.offsetLeft,\n      top: marker.offsetTop,\n      height: marker.offsetHeight\n    };\n    mirror.parentNode.removeChild(mirror);\n\n    return boundingRect;\n  };\n\n  initialize(html);\n\n  return {\n    rect,\n  };\n};\n\nexport default createMirror;\n","/**\n * Check if a DOM Element is content editable\n *\n * @param {Element} element  The DOM element\n *\n * @return {bool} If it is content editable\n */\nexport const isContentEditable = (element) => !!(\n  element.contentEditable &&\n  element.contentEditable === 'true'\n);\n\n/**\n * Get the context from settings passed in\n *\n * @param {object} settings The settings object\n *\n * @return {object} window and document\n */\nexport const getContext = (settings = {}) => {\n  const { customPos, iframe, noShadowCaret } = settings;\n  if (iframe) {\n    return {\n      iframe,\n      window: iframe.contentWindow,\n      document: iframe.contentDocument || iframe.contentWindow.document,\n      noShadowCaret,\n      customPos,\n    };\n  }\n\n  return {\n    window,\n    document,\n    noShadowCaret,\n    customPos,\n  };\n};\n\n/**\n * Get the offset of an element\n *\n * @param {Element} element The DOM element\n * @param {object} ctx The context\n *\n * @return {object} top and left\n */\nexport const getOffset = (element, ctx) => {\n  const win = ctx && ctx.window || window;\n  const doc = ctx && ctx.document || document;\n  const rect = element.getBoundingClientRect();\n  const docEl = doc.documentElement;\n  const scrollLeft = win.pageXOffset || docEl.scrollLeft;\n  const scrollTop = win.pageYOffset || docEl.scrollTop;\n\n  return {\n    top: rect.top + scrollTop,\n    left: rect.left + scrollLeft\n  };\n};\n\n/**\n * Check if a value is an object\n *\n * @param {any} value The value to check\n *\n * @return {bool} If it is an object\n */\nexport const isObject = (value) => typeof value === 'object' && value !== null;\n","/*----------------------------------------*\\\n  bcksp.es - base.js\n  @author Evrard Vincent (vincent@ogre.be)\n  @Date:   2018-12-18 16:54:39\n  @Last Modified time: 2018-12-18 16:54:50\n\\*----------------------------------------*/\nimport createInputCaret from './input';\nimport createEditableCaret from './editable';\nimport {\n  isContentEditable,\n  getContext,\n  isObject,\n} from './utils';\n\nexport { getOffset } from './utils';\n\nconst createCaret = (element, ctx) => {\n  if (isContentEditable(element)) {\n    return createEditableCaret(element, ctx);\n  }\n\n  return createInputCaret(element, ctx);\n};\n\nexport const position = (element, value, settings = {}) => {\n  let options = settings;\n  if (isObject(value)) {\n    options = value;\n    value = null;\n  }\n  const ctx = getContext(options);\n  const caret = createCaret(element, ctx);\n\n  if (value || value === 0) {\n    return caret.setPos(value);\n  }\n\n  return caret.getPosition();\n};\nexport const caretPosition = (element, value, settings = {}) => {\n  let options = settings;\n  if (isObject(value)) {\n    options = value;\n    value = null;\n  }\n  const ctx = getContext(options);\n  const caret = createCaret(element, ctx);\n\n\n  return caret;\n};\n\n/**\n *\n * @param {Element} element The DOM element\n * @param {number|undefined} value The value to set\n * @param {object} settings Any settings for context\n */\nexport const offset = (element, value, settings = {}) => {\n  let options = settings;\n  if (isObject(value)) {\n    options = value;\n    value = null;\n  }\n\n  const ctx = getContext(options);\n  const caret = createCaret(element, ctx);\n  return caret.getOffset(value);\n};\n","/**\n * Create an Editable Caret\n * @param {Element} element The editable element\n * @param {object|null} ctx The context\n *\n * @return {EditableCaret}\n */\nconst createEditableCaret = (element, ctx) => {\n\n  /**\n   * Set the caret position\n   *\n   * @param {int} pos The position to se\n   *\n   * @return {Element} The element\n   */\n  const setPos = (pos) => {\n    const sel = ctx.window.getSelection();\n    if (sel) {\n      let offset = 0;\n      let found = false;\n      const find = (position, parent) => {\n        for (let i = 0; i < parent.childNodes.length; i++) {\n          const node = parent.childNodes[i];\n          if (found) {\n            break;\n          }\n          if (node.nodeType === 3) {\n            if (offset + node.length >= position) {\n              found = true;\n              const range = ctx.document.createRange();\n              range.setStart(node, position - offset);\n              sel.removeAllRanges();\n              sel.addRange(range);\n              break;\n            } else {\n              offset += node.length;\n            }\n          } else {\n            find(pos, node);\n          }\n        }\n      };\n      find(pos, element);\n    }\n\n    return element;\n  };\n\n  /**\n   * Get the offset\n   *\n   * @return {object} The offset\n   */\n  const getOffset = () => {\n    const range = getRange();\n    let offset = {\n      height: 0,\n      left: 0,\n      right: 0,\n    };\n\n    if (!range) {\n      return offset;\n    }\n\n    const hasCustomPos = ctx.customPos || ctx.customPos === 0;\n\n    // endContainer in Firefox would be the element at the start of\n    // the line\n    if ((range.endOffset - 1 > 0 && range.endContainer !== element) || hasCustomPos) {\n      const clonedRange = range.cloneRange();\n      const fixedPosition = hasCustomPos ? ctx.customPos : range.endOffset;\n      clonedRange.setStart(range.endContainer, fixedPosition - 1 < 0 ? 0 : fixedPosition - 1);\n      clonedRange.setEnd(range.endContainer, fixedPosition);\n      const rect = clonedRange.getBoundingClientRect();\n      offset = {\n        height: rect.height,\n        left: rect.left + rect.width,\n        top: rect.top,\n      };\n      clonedRange.detach();\n    }\n\n    if ((!offset || (offset && offset.height === 0)) && !ctx.noShadowCaret) {\n      const clonedRange = range.cloneRange();\n      const shadowCaret = ctx.document.createTextNode('|');\n      clonedRange.insertNode(shadowCaret);\n      clonedRange.selectNode(shadowCaret);\n      const rect = clonedRange.getBoundingClientRect();\n      offset = {\n        height: rect.height,\n        left: rect.left,\n        top: rect.top,\n      };\n      shadowCaret.parentNode.removeChild(shadowCaret);\n      clonedRange.detach();\n    }\n\n    if (offset) {\n      const doc = ctx.document.documentElement;\n      offset.top += ctx.window.pageYOffset - (doc.clientTop || 0);\n      offset.left += ctx.window.pageXOffset - (doc.clientLeft || 0);\n    }\n\n    return offset;\n  };\n\n  /**\n   * Get the position\n   *\n   * @return {object} The position\n   */\n  const getPosition = () => {\n    const offset = getOffset();\n    const pos = getPos();\n    const rect = element.getBoundingClientRect();\n    const inputOffset = {\n      top: rect.top + ctx.document.body.scrollTop,\n      left: rect.left + ctx.document.body.scrollLeft\n    };\n    offset.left -= inputOffset.left;\n    offset.top -= inputOffset.top;\n    offset.pos = pos;\n\n    return offset;\n  };\n\n  /**\n   * Get the caret range\n   *\n   * @return {Range|null}\n   */\n  const get = () => {\n    if (!ctx.window.getSelection) {\n      return;\n    }\n    const sel = ctx.window.getSelection();\n    if(sel.rangeCount > 0){\n      let range = sel.getRangeAt(0); \n      return {\n        element : range.startContainer,\n        Start : range.startOffset, \n        End : range.endOffset\n      };\n    }\n  };\n  /**\n   * Get the range\n   *\n   * @return {Range|null}\n   */\n  const getRange = () => {\n    if (!ctx.window.getSelection) {\n      return;\n    }\n    const sel = ctx.window.getSelection();\n    return sel.rangeCount > 0 ? sel.getRangeAt(0) : null;\n  };\n\n  /**\n   * Get the caret position\n   *\n   * @return {int} The position\n   */\n  const getPos = () => {\n    const range = getRange();\n    const clonedRange = range.cloneRange();\n    clonedRange.selectNodeContents(element);\n    clonedRange.setEnd(range.endContainer, range.endOffset);\n    const pos = clonedRange.toString().length;\n    clonedRange.detach();\n\n    return pos;\n  };\n\n  return {\n    get,\n    getPos,\n    setPos,\n    getPosition,\n    getOffset,\n    getRange,\n  };\n};\n\nexport default createEditableCaret;\n","import createMirror from './mirror';\nimport { getOffset as elementOffset } from './utils';\n\n/**\n * Create a Input caret object.\n *\n * @param {Element} element The element\n * @param {Object} ctx The context\n */\nconst createInputCaret = (element, ctx) => {\n\n  /**\n   * Get the current position\n   *\n   * @returns {int} The caret position\n   */\n  const getPos = () => {\n    return element.selectionStart;\n  };\n\n  const get = () => {\n    return {\n      element : element,\n      Start : element.selectionStart, \n      End : element.selectionEnd\n    };\n  };\n\n  /**\n   * Set the position\n   *\n   * @param {int} pos The position\n   *\n   * @return {Element} The element\n   */\n  const setPos = (pos) => {\n    element.setSelectionRange(pos, pos);\n\n    return element;\n  };\n\n  /**\n   * The offset\n   *\n   * @param {int} pos The position\n   *\n   * @return {object} The offset\n   */\n  const getOffset = (pos) => {\n    const rect = elementOffset(element);\n    const position = getPosition(pos);\n\n    return {\n      top: rect.top + position.top + ctx.document.body.scrollTop,\n      left: rect.left + position.left + ctx.document.body.scrollLeft,\n      height: position.height,\n    };\n  };\n\n  /**\n   * Get the current position\n   *\n   * @param {int} pos The position\n   *\n   * @return {object} The position\n   */\n  const getPosition = (pos) => {\n    const format = (val) => {\n      let value = val.replace(/<|>|`|\"|&/g, '?')\n        .replace(/\\r\\n|\\r|\\n/g,'<br/>');\n      return value;\n    };\n\n    if (ctx.customPos || ctx.customPos === 0) {\n      pos = ctx.customPos;\n    }\n\n    const position = pos === undefined ? getPos() : pos;\n    const startRange = element.value.slice(0, position);\n    const endRange = element.value.slice(position);\n    let html = `<span style=\"position: relative; display: inline;\">${format(startRange)}</span>`;\n    html += '<span id=\"caret-position-marker\" style=\"position: relative; display: inline;\">|</span>';\n    html += `<span style=\"position: relative; display: inline;\">${format(endRange)}</span>`;\n\n    const mirror = createMirror(element, html);\n    const rect = mirror.rect();\n    rect.pos = getPos();\n\n    return rect;\n  };\n\n  return {\n    get,\n    getPos,\n    setPos,\n    getOffset,\n    getPosition,\n  };\n};\n\nexport default createInputCaret;\n","import * as CaretPos from './base.js';\n\nclass Util{\n  static getContentEditableInParent(element){\n    if(element.hasAttribute('contenteditable')){\n      return element;\n    }\n    if(element.parentElement){\n      return Util.getContentEditableInParent(element.parentElement);  \n    }\n    return false;\n  }\n  static isInputField(element){\n    let nodeName = element.nodeName;\n    return nodeName == 'TEXTAREA' || nodeName == 'INPUT';\n  }\n  static checkTarget(target){\n    if(!Util.isInputField(target)){\n      target = Util.getContentEditableInParent(target);\n    }\n    return target;\n  }\n  static getContent(target){\n    return target.value || target.innerText;\n  }\n}\n\nclass CaretUtil extends Util{\n  constructor(){\n    super();\n    this.CaretPos = CaretPos;\n    this.caret;\n    this.target;\n    this.startAt;\n    this.stopAt;\n  }\n  disable(){\n    this.target = null;\n    this.startAt = null;\n    this.stopAt = null;\n  }\n  enable(target){\n    if(!(target instanceof Element))throw new Error('Caret must receive an Element as target');\n    this.caret = this.CaretPos.caretPosition(target);\n    let range = this.caret.get();\n    if(    isNaN(range.Start)\n      || isNaN(range.End)\n      || range.Start < 0\n      || range.End < 0\n    ){\n      throw new Error('Troubble during Ranging');\n    }\n    this.target = target;\n    this.startAt = range.Start;\n    this.stopAt = range.End;\n  }\n  getTarget(){\n    return this.target;\n  }\n  getSelectedText(){\n    if(!this.target || this.startAt == this.stopAt)return null;\n    let content = Util.getContent(this.target);\n    return content.substring(this.startAt, this.stopAt);\n  }\n  getCharBeforCaret(){\n    if(!this.target || this.startAt<1)return null;\n    let content = Util.getContent(this.target);\n    return content.charAt(this.startAt-1);\n  }\n}\n\nexport class Caret extends CaretUtil{\n  constructor(target = document){\n    super();\n    window.onload = ()=>{\n      if(typeof target === 'string'){\n        target = document.querySelectorAll(target);\n      }\n      let start = (target)=>{\n        target.addEventListener('keyup', this._handleEvent.bind(this));\n        target.addEventListener('mouseup', this._handleEvent.bind(this));  \n      };\n      if(target instanceof NodeList){\n        target.forEach(start);\n      }else if(target instanceof Element){\n        start(target);\n      }else if(target instanceof Document){\n        start(target);\n      }\n    };\n    this.caretChangeHandler = [];\n  }\n  _handleEvent(event){\n    let target;\n    if(false !== (target = CaretUtil.checkTarget(event.target))){\n      this.enable(target);\n      this._triggerCaretChange({\n        target : this.target,\n        caret : this.caret,\n        selectedText : this.getSelectedText(),\n        charBeforCaret : this.getCharBeforCaret()\n      });\n    }else{\n      this.disable();\n    }\n  }\n  _triggerCaretChange(event){\n    this.caretChangeHandler.map(handler=>{\n      handler(event);\n    });\n  }\n  onCaretChange(fnc){\n    if(fnc && {}.toString.call(fnc) === '[object Function]'){\n      this.caretChangeHandler.push(fnc);\n    }\n  }\n}"]}